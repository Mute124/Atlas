/*#include "raylib.h"
#include "FastNoiseLite.h"
#include <vector>

#define CHUNK_SIZE 32
#define CHUNK_RADIUS 3

struct Chunk {
	Vector3 position;
	float heightMap[CHUNK_SIZE + 1][CHUNK_SIZE + 1];
};

std::vector<Chunk> loadedChunks;

void GenerateChunk(Chunk &chunk) {
	FastNoiseLite noise;
	noise.SetNoiseType(FastNoiseLite::NoiseType_Perlin);
	noise.SetFrequency(0.1f);
	noise.SetSeed(123);

	for (int x = 0; x <= CHUNK_SIZE; x++) {
		for (int z = 0; z <= CHUNK_SIZE; z++) {
			float nx = (float)(x + chunk.position.x) / CHUNK_SIZE;
			float nz = (float)(z + chunk.position.z) / CHUNK_SIZE;
			float height = 10.0f * noise.GetNoise(nx, nz);
			chunk.heightMap[x][z] = height;
		}
	}
}

void LoadChunks(const Vector3 &playerPosition) {
	for (int x = -CHUNK_RADIUS; x <= CHUNK_RADIUS; x++) {
		for (int z = -CHUNK_RADIUS; z <= CHUNK_RADIUS; z++) {
			Vector3 chunkPos = {playerPosition.x + x * CHUNK_SIZE, 0.0f, playerPosition.z + z * CHUNK_SIZE};
			bool chunkLoaded = false;
			for (const Chunk &chunk : loadedChunks) {
				if (Vector3Distance(chunk.position, chunkPos) < CHUNK_SIZE) {
					chunkLoaded = true;
					break;
				}
			}
			if (!chunkLoaded) {
				Chunk newChunk;
				newChunk.position = chunkPos;
				GenerateChunk(newChunk);
				loadedChunks.push_back(newChunk);
			}
		}
	}
}

void UnloadChunks(const Vector3 &playerPosition) {
	auto it = loadedChunks.begin();
	while (it != loadedChunks.end()) {
		if (Vector3Distance(playerPosition, it->position) > CHUNK_RADIUS * CHUNK_SIZE * 1.5f) {
			it = loadedChunks.erase(it);
		} else {
			++it;
		}
	}
}

int main() {
	InitWindow(800, 450, "Infinite Terrain Generation");

	Vector3 playerPosition = {0.0f, 0.0f, 0.0f};

	Camera camera = {0};
	camera.position = {10.0f, 20.0f, 10.0f};
	camera.target = {0.0f, 0.0f, 0.0f};
	camera.up = {0.0f, 1.0f, 0.0f};
	camera.fovy = 45.0f;
	camera.type = CAMERA_PERSPECTIVE;

	SetCameraMode(camera, CAMERA_FREE);

	SetTargetFPS(60);

	while (!WindowShouldClose()) {

		// Update
		UpdateCamera(&camera);

		playerPosition = camera.position;

		LoadChunks(playerPosition);
		UnloadChunks(playerPosition);

		// Draw
		BeginDrawing();
		ClearBackground(RAYWHITE);

		BeginMode3D(camera);

		for (const Chunk &chunk : loadedChunks) {
			for (int x = 0; x < CHUNK_SIZE; x++) {
				for (int z = 0; z < CHUNK_SIZE; z++) {
					Vector3 p1 = { chunk.position.x + x, chunk.heightMap[x][z], chunk.position.z + z };
					Vector3 p2 = { chunk.position.x + x + 1, chunk.heightMap[x + 1][z], chunk.position.z + z };
					Vector3 p3 = { chunk.position.x + x, chunk.heightMap[x][z + 1], chunk.position.z + z + 1 };
					Vector3 p4 = { chunk.position.x + x + 1, chunk.heightMap[x + 1][z + 1], chunk.position.z + z + 1 };
					DrawTriangle(p1, p2, p3, GREEN);
					DrawTriangle(p2, p4, p3, GREEN);
				}
			}
		}

		EndMode3D();

		DrawFPS(10, 10);

		EndDrawing();
	}

	CloseWindow();

	return 0;
}
*/
#include <raylib.h>
#include <raymath.h>
#include <cmath>
#include <iostream>
#include <FastNoiseLite.h>
#include <vector>
#define RLIGHTS_IMPLEMENTATION
#include "rlights.h"

#define SCREEN_WIDTH 800
#define SCREEN_HEIGHT 450

#define CHUNK_SIZE 32
#define VIEW_DISTANCE 8 // Number of chunks visible in each direction

Shader shader;

struct Chunk {
	float heightMap[CHUNK_SIZE + 1][CHUNK_SIZE + 1];

	Vector3 position;
};

Chunk chunks[VIEW_DISTANCE * 2 + 1][VIEW_DISTANCE * 2 + 1];

Mesh loadMeshes(Vector3* vertices, Vector3* normals, Vector2* texcoords, int numVertices, int* indices, int numTriangles) {
	Mesh mesh = { 0 };

	mesh.vertices = (float*)malloc(numVertices * 3 * sizeof(float));
	mesh.normals = (float*)malloc(numVertices * 3 * sizeof(float));
	mesh.texcoords = (float*)malloc(numVertices * 2 * sizeof(float));
	mesh.indices = (unsigned short*)malloc(numTriangles * 3 * sizeof(unsigned short));
	mesh.vertexCount = numVertices;
	mesh.triangleCount = numTriangles;

	UploadMesh(&mesh, false);

	return mesh;
}

Mesh genMeshFromChunk(const Chunk& chunk) {
	Mesh mesh = { 0 };

	int numVertices = (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1);
	Vector3* vertices = (Vector3*)malloc(numVertices * sizeof(Vector3));
	Vector3* normals = (Vector3*)malloc(numVertices * sizeof(Vector3));
	Vector2* texcoords = (Vector2*)malloc(numVertices * sizeof(Vector2));

	int numTriangles = CHUNK_SIZE * CHUNK_SIZE * 2;
	int* indices = (int*)malloc(numTriangles * 3 * sizeof(int));

	int vertexIndex = 0;
	int indexIndex = 0;

	for (int x = 0; x <= CHUNK_SIZE; x++) {
		for (int z = 0; z <= CHUNK_SIZE; z++) {
			vertices[vertexIndex] = { chunk.position.x + x, chunk.heightMap[x][z], chunk.position.z + z };

			// Calculate normals (simple average of adjacent face normals)
			Vector3 normalSum = { 0.0f, 0.0f, 0.0f };
			int numNormals = 0;
			if (x > 0) {
				Vector3 v1 = { vertices[vertexIndex].x - 1, chunk.heightMap[x - 1][z], vertices[vertexIndex].z };
				Vector3 v2 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 v3 = { vertices[vertexIndex].x, chunk.heightMap[x][z - 1], vertices[vertexIndex].z - 1 };
				Vector3 faceNormal1 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal1);
				numNormals++;
			}
			if (x < CHUNK_SIZE) {
				Vector3 v1 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 v2 = { vertices[vertexIndex].x + 1, chunk.heightMap[x + 1][z], vertices[vertexIndex].z };
				Vector3 v3 = { vertices[vertexIndex].x, chunk.heightMap[x][z + 1], vertices[vertexIndex].z + 1 };
				Vector3 faceNormal2 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal2);
				numNormals++;
			}
			if (z > 0) {
				Vector3 v1 = { vertices[vertexIndex].x, chunk.heightMap[x][z - 1], vertices[vertexIndex].z - 1 };
				Vector3 v2 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 v3 = { vertices[vertexIndex].x - 1, chunk.heightMap[x - 1][z], vertices[vertexIndex].z };
				Vector3 faceNormal3 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal3);
				numNormals++;
			}
			if (z < CHUNK_SIZE) {
				Vector3 v1 = { vertices[vertexIndex].x + 1, chunk.heightMap[x + 1][z], vertices[vertexIndex].z };
				Vector3 v2 = { vertices[vertexIndex].x, chunk.heightMap[x][z + 1], vertices[vertexIndex].z + 1 };
				Vector3 v3 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 faceNormal4 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal4);
				numNormals++;
			}

			normals[vertexIndex] = Vector3Scale(normalSum, 1.0f / numNormals);
			texcoords[vertexIndex] = { (float)x / CHUNK_SIZE, (float)z / CHUNK_SIZE };

			vertexIndex++;
		}
	}

	for (int x = 0; x < CHUNK_SIZE; x++) {
		for (int z = 0; z < CHUNK_SIZE; z++) {
			indices[indexIndex++] = (x + 1) * (CHUNK_SIZE + 1) + z;
			indices[indexIndex++] = x * (CHUNK_SIZE + 1) + z + 1;
			indices[indexIndex++] = x * (CHUNK_SIZE + 1) + z;

			indices[indexIndex++] = (x + 1) * (CHUNK_SIZE + 1) + z;
			indices[indexIndex++] = (x + 1) * (CHUNK_SIZE + 1) + z + 1;
			indices[indexIndex++] = x * (CHUNK_SIZE + 1) + z + 1;
		}
	}

	mesh = loadMeshes(vertices, normals, texcoords, numVertices, indices, numTriangles * 3);

	free(vertices);
	free(normals);
	free(texcoords);
	free(indices);

	return mesh;
}

void GenerateTerrain() {
	FastNoiseLite noise;
	noise.SetNoiseType(FastNoiseLite::NoiseType_Perlin);
	noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
	noise.SetSeed(123); // Set a seed for consistent noise generation
	noise.SetDomainWarpType(FastNoiseLite::DomainWarpType_OpenSimplex2);

	FastNoiseLite cellNoise;
	cellNoise.SetNoiseType(FastNoiseLite::NoiseType_Cellular);
	noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
	noise.SetSeed(123); // Set a seed for consistent noise generation
	FastNoiseLite simplexNoise;
	simplexNoise.SetNoiseType(FastNoiseLite::NoiseType_OpenSimplex2);
	noise.SetFrequency(0.4f); // Adjust the frequency of the Perlin noise
	noise.SetSeed(123); // Set a seed for consistent noise generation
	float scale = 10.0f;
	srand((unsigned)time(NULL));

	// Simple terrain generation using Perlin noise
	for (int i = 0; i < VIEW_DISTANCE * 2 + 1; i++) {
		for (int j = 0; j < VIEW_DISTANCE * 2 + 1; j++) {
			Chunk& chunk = chunks[i][j];
			chunk.position.x = i * CHUNK_SIZE;
			chunk.position.y = 0;
			chunk.position.z = j * CHUNK_SIZE;

			for (int x = 0; x <= CHUNK_SIZE; x++) {
				for (int z = 0; z <= CHUNK_SIZE; z++) {
					float nx = (float)(x + i * CHUNK_SIZE) / (VIEW_DISTANCE * CHUNK_SIZE);
					float nz = (float)(z + j * CHUNK_SIZE) / (VIEW_DISTANCE * CHUNK_SIZE);

					float cellSize = 1.0f / CHUNK_SIZE;

					float cellValue = cellNoise.GetNoise(nx * cellSize, nz * cellSize) * 10.0f;
					float simplexValue = simplexNoise.GetNoise(nx * scale, nz * scale) * 10.0f;

					float px = nx, pz = nz;

					noise.DomainWarp(px, pz);

					px *= scale;
					pz *= scale;
					float perlinValue = noise.GetNoise(px, pz);

					//float noiseValue = perlinValue * simplexValue * 10.0f;

					float height = 10.0f * noise.GetNoise(nx * scale, nz * scale) + cellValue + simplexValue;

					/*					float caveNoise = noise.GetNoise(nx * 2, nz * 2); // Adjust noise frequency for caves
										if (caveNoise < 0.5f) {
											height -= 5.0f; // Lower the terrain height to create a cave
										}*/

										//std::cout << height << std::endl;
					chunk.heightMap[x][z] = height;
				}
			}
		}
	}
}

Camera camera;
void DrawTerrain() {
	float vDistMultiplier = 100.0f;
	float vDist = (VIEW_DISTANCE * CHUNK_SIZE) * vDistMultiplier;
	bool forceAllDraw = false;

	// Draw terrain for visible chunks
	for (int i = 0; i < VIEW_DISTANCE * 2 + 1; i++) {
		for (int j = 0; j < VIEW_DISTANCE * 2 + 1; j++) {
			Chunk& chunk = chunks[i][j];

			for (int x = 0; x < CHUNK_SIZE; x++) {
				for (int z = 0; z < CHUNK_SIZE; z++) {
					Vector3 p1 = { (float)(x + i * CHUNK_SIZE), chunk.heightMap[x][z], (float)(z + j * CHUNK_SIZE) };
					Vector3 p2 = { (float)(x + i * CHUNK_SIZE + 1), chunk.heightMap[x + 1][z], (float)(z + j * CHUNK_SIZE) };
					Vector3 p3 = { (float)(x + i * CHUNK_SIZE), chunk.heightMap[x][z + 1], (float)(z + j * CHUNK_SIZE + 1) };
					Vector3 p4 = { (float)(x + i * CHUNK_SIZE + 1), chunk.heightMap[x + 1][z + 1], (float)(z + j * CHUNK_SIZE + 1) };

					if (!forceAllDraw) {
						float dist = (camera.position.x - chunk.position.x) * (camera.position.x - chunk.position.x) + (camera.position.z - chunk.position.z) * (camera.position.z - chunk.position.z);

						float p1Dist = (p1.x - camera.position.x) * (p1.x - camera.position.x) + (p1.z - camera.position.z) * (p1.z - camera.position.z);
						float p2Dist = (p2.x - camera.position.x) * (p2.x - camera.position.x) + (p2.z - camera.position.z) * (p2.z - camera.position.z);
						float p3Dist = (p3.x - camera.position.x) * (p3.x - camera.position.x) + (p3.z - camera.position.z) * (p3.z - camera.position.z);
						float p4Dist = (p4.x - camera.position.x) * (p4.x - camera.position.x) + (p4.z - camera.position.z) * (p4.z - camera.position.z);

						if (dist < vDist) {

							//if ((p1Dist < vDist && p2Dist < vDist && p3Dist < vDist && p4Dist < vDist)) {
							//DrawModel(chunk.mdl, chunk.position, 1.0f, WHITE);
							DrawTriangle3D(p3, p2, p1, GREEN);
							DrawTriangle3D(p3, p4, p2, BLUE);
						}

						//}
					}
					else {

						//DrawModel(chunk.mdl, chunk.position, 1.0f, WHITE);

						DrawTriangle3D(p3, p2, p1, GREEN);
						DrawTriangle3D(p3, p4, p2, BLUE);
					}
				}
			}
		}
	}
}

int main() {

	// Initialization
	InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Procedural World Generation");
	camera = Camera();

	camera.position = Vector3{ 2.0f, 10.0f, 6.0f };    // Camera position
	camera.target = Vector3{ 0.0f, 0.5f, 0.0f };      // Camera looking at point
	camera.up = Vector3{ 0.0f, 1.0f, 0.0f };          // Camera up vector (rotation towards target)
	camera.fovy = 45.0f;                                // Camera field-of-view Y
	camera.projection = CAMERA_PERSPECTIVE;             // Camera projection type

	shader = LoadShader("base.vs", "base.fs");

	//shader.locs[SHADER_LOC_VECTOR_VIEW] = GetShaderLocation(shader, "viewPos");
	//int ambientLoc = GetShaderLocation(shader, "ambient");
	//float amb[] = { 0.1f, 0.1f, 0.1f, 1.0f };
	//SetShaderValue(shader, ambientLoc, &amb, SHADER_UNIFORM_VEC4);

	// Create lights
	//Light lights[MAX_LIGHTS] = { 0 };

	//lights[0] = CreateLight(LightType::LIGHT_POINT, camera.position, Vector3{ 0.0f, 0.0f, 0.0f }, WHITE, shader);
	GenerateTerrain();

	SetTargetFPS(60);
	DisableCursor();
	float color[] = { BLUE.r, BLUE.g, BLUE.b, BLUE.a };

	// Main loop
	while (!WindowShouldClose()) {

		// Update
		UpdateCamera(&camera, CAMERA_FIRST_PERSON);

		if (IsKeyDown(KEY_SPACE)) {
			camera.position.y += 1.0f;
		}

		if (IsKeyDown(KEY_C)) {
			camera.position.y -= 1.0f;
		}

		//float cameraPos[3] = { camera.position.x, camera.position.y, camera.position.z };
		//SetShaderValue(shader, shader.locs[SHADER_LOC_VECTOR_VIEW], cameraPos, SHADER_UNIFORM_VEC3);
		//for (int i = 0; i < MAX_LIGHTS; i++) UpdateLightValues(shader, lights[i]);

		// Draw
		BeginDrawing();
		ClearBackground(BLACK);
		BeginMode3D(camera);

		DrawSphere(Vector3{ 0.0f, 0.0f, 0.0f }, 1.0f, GREEN);

		//BeginShaderMode(shader);

		DrawTerrain();

		//EndShaderMode();
		EndMode3D();

		EndDrawing();
	}

	// Clean up
	CloseWindow();

	return 0;
}



	void old() {

		/*		std::cout << "Generating..." << std::endl;

		std::cout << "setuping noise" << std::endl;
		FastNoiseLite noise;
		noise.SetNoiseType(FastNoiseLite::NoiseType_Perlin);
		noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
		noise.SetSeed(123); // Set a seed for consistent noise generation
		noise.SetDomainWarpType(FastNoiseLite::DomainWarpType_OpenSimplex2);

		FastNoiseLite cellNoise;
		cellNoise.SetNoiseType(FastNoiseLite::NoiseType_Cellular);
		noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
		noise.SetSeed(123); // Set a seed for consistent noise generation
		FastNoiseLite simplexNoise;
		simplexNoise.SetNoiseType(FastNoiseLite::NoiseType_OpenSimplex2);
		noise.SetFrequency(0.4f); // Adjust the frequency of the Perlin noise
		noise.SetSeed(123); // Set a seed for consistent noise generation
		float scale = 10.0f;

		float cellSize = 1.0f / CHUNK_SIZE;
		//using namespace JPH;
		JPH::uint32 max_material_index = 0;


		std::cout << "Generating terrain sectors" << std::endl;

		for (int i = 0; i < VIEW_DISTANCE * 2 + 1; i++) {
			for (int j = 0; j < VIEW_DISTANCE * 2 + 1; j++) {
				TerrainSector& sector = terrainSectors[std::make_pair(i, j)];
				sector.objectPosition.x = i * CHUNK_SIZE;
				sector.objectPosition.y = 0;
				sector.objectPosition.z = j * CHUNK_SIZE;

				for (int x = 0; x <= CHUNK_SIZE; x++) {
					for (int z = 0; z <= CHUNK_SIZE; z++) {
						float nx = (float)(x + i * CHUNK_SIZE) / (VIEW_DISTANCE * CHUNK_SIZE);
						float nz = (float)(z + j * CHUNK_SIZE) / (VIEW_DISTANCE * CHUNK_SIZE);

						float cellValue = cellNoise.GetNoise(nx * cellSize, nz * cellSize) * 10.0f;
						float simplexValue = simplexNoise.GetNoise(nx * scale, nz * scale) * 10.0f;

						float px = nx, pz = nz;

						noise.DomainWarp(px, pz);

						px *= scale;
						pz *= scale;
						float perlinValue = noise.GetNoise(px, pz);

						//float noiseValue = perlinValue * simplexValue * 10.0f;

						float height = 10.0f * noise.GetNoise(nx * scale, nz * scale) + cellValue + simplexValue;

						sector.heightMap[x][z] = height;


						JPH::Float3 v1 = { (float)(x + i * CHUNK_SIZE), height, (float)(z + j * CHUNK_SIZE) };
						JPH::Float3 v2 = { (float)(x + i * CHUNK_SIZE + 1), height, (float)(z + j * CHUNK_SIZE) };
						JPH::Float3 v3 = { (float)(x + i * CHUNK_SIZE), height, (float)(z + j * CHUNK_SIZE + 1) };
						JPH::Float3 v4 = { (float)(x + i * CHUNK_SIZE + 1), height, (float)(z + j * CHUNK_SIZE + 1) };

						JPH::uint32 material_index = JPH::uint32((JPH::Vec3(v1) + JPH::Vec3(v2) + JPH::Vec3(v3) + JPH::Vec3(v4)).Length() / 40.0f);
						max_material_index = JPH::max(max_material_index, material_index);

						triangles.emplace_back(JPH::Triangle(v1, v3, v4, material_index));
						triangles.emplace_back(JPH::Triangle(v1, v4, v2, material_index));
					}
				}
			}
		}*/
		/*
				JPH::uint32 max_material_index = 0;
				for (int x = -10; x < 10; ++x)
					for (int z = -10; z < 10; ++z)
					{
						float x1 = 10.0f * x;
						float z1 = 10.0f * z;
						float x2 = x1 + 10.0f;
						float z2 = z1 + 10.0f;

						JPH::Float3 v1 = JPH::Float3(x1, 0, z1);
						JPH::Float3 v2 = JPH::Float3(x2, 0, z1);
						JPH::Float3 v3 = JPH::Float3(x1, 0, z2);
						JPH::Float3 v4 = JPH::Float3(x2, 0, z2);

						JPH::uint32 material_index = JPH::uint32((JPH::Vec3(v1) + JPH::Vec3(v2) + JPH::Vec3(v3) + JPH::Vec3(v4)).Length() / 40.0f);
						max_material_index = JPH::max(max_material_index, material_index);
						triangles.push_back(JPH::Triangle(v1, v3, v4, material_index));
						triangles.push_back(JPH::Triangle(v1, v4, v2, material_index));
					}
				std::cout << "Finished generating terrain sectors, Total sectors : " << VIEW_DISTANCE * 2 + 1 * VIEW_DISTANCE * 2 + 1 << std::endl;

				std::cout << "Generating terrain physics" << std::endl;
				// Create materials
				std::cout << "Creating materials" << std::endl;

				for (JPH::uint i = 0; i <= max_material_index; ++i) {
					auto materialname = std::string("Material ");
					materialname += JPH::ConvertToString(i);

					std::cout << "creating material : " << materialname << std::endl;
					materials.push_back(new JPH::PhysicsMaterialSimple(materialname, JPH::Color::sGetDistinctColor(i)));
				}

				JPH::Body& body = *bodyInterface.CreateBody(JPH::BodyCreationSettings(new JPH::MeshShapeSettings(triangles, std::move(materials)), JPH::RVec3::sZero(), JPH::Quat::sRotation(JPH::Vec3::sAxisX(), 0.25f * JPH::JPH_PI), JPH::EMotionType::Static, Layers::NON_MOVING));
				bodyInterface.AddBody(body.GetID(), JPH::EActivation::DontActivate);
				this->id = body.GetID();
		*/



		/*// Add it to the world
		bodyInterface.AddBody(floor->GetID(), JPH::EActivation::DontActivate);
		std::cout << "Creating terrain physics body" << std::endl;
		meshShapeSettings = JPH::MeshShapeSettings(triangles, materials);

		terrainSettings = JPH::BodyCreationSettings(
			meshShapeSettings, // dereference the pointers
			JPH::Vec3::sZero(),
			JPH::Quat::sIdentity(),
			JPH::EMotionType::Static,
			Layers::NON_MOVING
		);
		id = bodyInterface.CreateAndAddBody(
		terrainSettings,
	JPH::EActivation::Activate
		);*/

		//std::cout << "Added terrain body" << std::endl;

		/*
		FastNoiseLite noise;
		noise.SetNoiseType(FastNoiseLite::NoiseType_Perlin);
		noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
		noise.SetSeed(123); // Set a seed for consistent noise generation
		noise.SetDomainWarpType(FastNoiseLite::DomainWarpType_OpenSimplex2);

		FastNoiseLite cellNoise;
		cellNoise.SetNoiseType(FastNoiseLite::NoiseType_Cellular);
		noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
		noise.SetSeed(123); // Set a seed for consistent noise generation
		FastNoiseLite simplexNoise;
		simplexNoise.SetNoiseType(FastNoiseLite::NoiseType_OpenSimplex2);
		noise.SetFrequency(0.4f); // Adjust the frequency of the Perlin noise
		noise.SetSeed(123); // Set a seed for consistent noise generation


		// Create height samples
		mTerrainSize = n;
		mTerrain.resize(n * n);
		for (int y = 0; y < n; ++y) {
			for (int x = 0; x < n; ++x) {

				float perling = noise.GetNoise(float(x) * 8.0f / n, float(y) * 8.0f / n);
				mTerrain[y * n + x] = max_height * perling;
			}
		}

		// Make some holes
		//mTerrain[2 * n + 2] = HeightFieldShapeConstants::cNoCollisionValue;
		//for (int y = 4; y < 33; ++y)
		//	for (int x = 4; x < 33; ++x)
		//		mTerrain[y * n + x] = HeightFieldShapeConstants::cNoCollisionValue;

		// Make material indices
		JPH::uint8 max_material_index = 0;
		mMaterialIndices.resize(JPH::Square(n - 1));
		for (int y = 0; y < n - 1; ++y)
			for (int x = 0; x < n - 1; ++x)
			{
				JPH::uint8 material_index = JPH::uint8(
					JPH::round((JPH::Vec3(x * cell_size, 0, y * cell_size) - JPH::Vec3(n * cell_size / 2, 0, n * cell_size / 2)).Length() / 10.0f));
				max_material_index = JPH::max(max_material_index, material_index);
				mMaterialIndices[y * (n - 1) + x] = material_index;
			}

		// Mark the corners to validate that materials and heights match
		mTerrain[0] = 0.0f;
		mTerrain[n - 1] = 10.0f;
		mTerrain[(n - 1) * n] = 20.0f;
		mTerrain[n * n - 1] = 30.0f;
		mMaterialIndices[0] = 0;
		mMaterialIndices[n - 2] = 1;
		mMaterialIndices[(n - 2) * (n - 1)] = 2;
		mMaterialIndices[JPH::Square(n - 1) - 1] = 3;

		// Create materials
		for (JPH::uint8 i = 0; i <= max_material_index; ++i)
			mMaterials.push_back(new JPH::PhysicsMaterialSimple("Material " + JPH::ConvertToString(JPH::uint(i)), JPH::Color::sGetDistinctColor(i)));

		// Determine scale and offset (deliberately apply extra offset and scale in Y direction)
		mTerrainOffset = JPH::Vec3(-0.5f * cell_size * n, -2.0f, -0.5f * cell_size * n);
		mTerrainScale = JPH::Vec3(cell_size, 1.5f, cell_size);

		using namespace JPH;
		// Create height field
		HeightFieldShapeSettings settings(mTerrain.data(), mTerrainOffset, mTerrainScale, mTerrainSize, mMaterialIndices.data(), mMaterials);
		settings.mBlockSize = 1 << sBlockSizeShift;
		settings.mBitsPerSample = sBitsPerSample;
		mHeightField = static_cast<const HeightFieldShape*>(settings.Create().Get().GetPtr());
		Body& terrain = *bodyInterface.CreateBody(BodyCreationSettings(mHeightField, RVec3::sZero(), Quat::sIdentity(), EMotionType::Static, Layers::NON_MOVING));
		bodyInterface.AddBody(terrain.GetID(), EActivation::DontActivate);

		// Validate it
		float max_diff = -1.0f;
		uint max_diff_x = 0, max_diff_y = 0;
		float min_height = FLT_MAX, max_height = -FLT_MAX, avg_diff = 0.0f;
		for (uint y = 0; y < mTerrainSize; ++y) {
			for (uint x = 0; x < mTerrainSize; ++x)
			{
				float h1 = mTerrain[y * mTerrainSize + x];
				if (h1 != HeightFieldShapeConstants::cNoCollisionValue)
				{
					h1 = mTerrainOffset.GetY() + mTerrainScale.GetY() * h1;
					if (mHeightField->IsNoCollision(x, y)) {
						std::cout << "No collision where there should be" << std::endl;
					}
					float h2 = mHeightField->GetPosition(x, y).GetY();
					float diff = abs(h2 - h1);
					if (diff > max_diff)
					{
						max_diff = diff;
						max_diff_x = x;
						max_diff_y = y;
					}
					min_height = min(min_height, h1);
					max_height = max(max_height, h1);
					avg_diff += diff;
				}
				else
				{
					if (!mHeightField->IsNoCollision(x, y)) {
						std::cout << "Collision where there shouldn't be" << std::endl;
					}
				}
			}
		}

		// Calculate relative error
		float rel_error = min_height < max_height ? 100.0f * max_diff / (max_height - min_height) : 0.0f;

		// Max error we expect given sBitsPerSample (normally the error should be much lower because we quantize relative to the block rather than the full height)
		float max_error = 0.5f * 100.0f / ((1 << sBitsPerSample) - 1);

		// Calculate average
		avg_diff /= mTerrainSize * mTerrainSize;

		// Calculate amount of memory used
		Shape::Stats stats = mHeightField->GetStats();

		// Trace stats
		Trace("Block size: %d, bits per sample: %d, min height: %g, max height: %g, avg diff: %g, max diff: %g at (%d, %d), relative error: %g%%, size: %u bytes", 1 << sBlockSizeShift, sBitsPerSample, (double)min_height, (double)max_height, (double)avg_diff, (double)max_diff, max_diff_x, max_diff_y, (double)rel_error, stats.mSizeBytes);
		if (rel_error > max_error) {

			std::cout << "Error too big!" << std::endl;
		}

		// Determine terrain height
		RayCastResult result;
		RVec3 start(0, 1000, 0);
		Vec3 direction(0, -2000, 0);
		RRayCast ray{ start, direction };

		PhysicsSystem* physicsSystem = PhysicsEngine::Instance().mPhysicsSystem;
		// The physics system that simulates the world
		if (physicsSystem->GetNarrowPhaseQuery().CastRay(ray, result, SpecifiedBroadPhaseLayerFilter(BroadPhaseLayers::NON_MOVING), SpecifiedObjectLayerFilter(Layers::NON_MOVING)))
			mHitPos = ray.GetPointOnRay(result.mFraction);

		// Dynamic body
		Body& body1 = *bodyInterface.CreateBody(BodyCreationSettings(new BoxShape(Vec3(0.5f, 1.0f, 2.0f)), mHitPos + Vec3(0, 10, 0), Quat::sIdentity(), EMotionType::Dynamic, Layers::MOVING));
		bodyInterface.AddBody(body1.GetID(), EActivation::Activate);

		this->id = body1.GetID();
		*/
	}

	/*
		
		constexpr float cCellSize = 1.0f;
		constexpr float cMaxHeight = 5.0f;
		constexpr float cSphereRadius = 2.0f;

		float noiseMap[cSampleCount][cSampleCount];

		// Create height samples
		mHeightSamples.resize(cSampleCount * cSampleCount);
		for (int x = 0; x < cSampleCount; ++x) {
			for (int z = 0; z < cSampleCount; ++z) {

				//float perlin = PerlinNoise3(float(x) * 8.0f / cSampleCount, y + x, float(y) * 8.0f / cSampleCount, 256, 256, 256);
				noiseMap[x][z] = cMaxHeight * noise.GetNoise((float)x, (float)z);

				mHeightSamples[x * cSampleCount + z] = noiseMap[x][z];

				
			}
		}
		float off = 0;
		// create triangles
		for (int x = 0; x < cSampleCount - 1; ++x) {
			for (int z = 0; z < cSampleCount - 1; ++z) {

				float y1 = noiseMap[x][z];
				float y2 = noiseMap[x + 1][z];
				float y3 = noiseMap[x][z + 1];
				float y4 = noiseMap[x + 1][z + 1];

				Vector3 v1 = Vector3(x * cCellSize, y1 + off, z * cCellSize);
				Vector3 v2 = Vector3(x * cCellSize + cBlockSize, y2 + off, z * cCellSize);
				Vector3 v3 = Vector3(x * cCellSize, y3 + off, z * cCellSize + cBlockSize);
				Vector3 v4 = Vector3(x * cCellSize + cBlockSize, y4 + off, z * cCellSize + cBlockSize);

				Trian t(v1, v3, v4, RED);
				Trian t2(v1, v4, v2, GREEN);


				trianglesVector.push_back(t);
				trianglesVector.push_back(t2);
			}
		}
		using namespace JPH;
		// Determine scale and offset of the terrain
		Vec3 offset(-0.5f * cCellSize * cSampleCount, 0, -0.5f * cCellSize * cSampleCount);
		Vec3 scale(cCellSize, 1.0f, cCellSize);

		// Create height field
		HeightFieldShapeSettings settings(mHeightSamples.data(), offset, scale, cSampleCount);
		settings.mBlockSize = cBlockSize;
		settings.mBitsPerSample = 8;
		//settings.mMinHeightValue = -15.0f;
		mHeightField = static_cast<HeightFieldShape*>(settings.Create().Get().GetPtr());
		//mHeightFieldID = bodyInterface.CreateAndAddBody(BodyCreationSettings(mHeightField, RVec3(0, 0, 0), Quat::sIdentity(), EMotionType::Static, Layers::NON_MOVING), EActivation::DontActivate);
		JPH::Body& body = *bodyInterface.CreateBody(BodyCreationSettings(mHeightField, RVec3(0, 0, 0), Quat::sIdentity(), EMotionType::Static, Layers::NON_MOVING));
		

 		PhysicsSystem* physicsSystem = GetPhysicsSystem();
		// Spheres on top of the terrain
		//RefConst<Shape> sphere_shape = new SphereShape(cSphereRadius);
		for (float t = 0.2f; t < 12.4f; t += 0.1f)
		{
			// Get the center of the path
			//Vec3 center = offset + GetPathCenter(t);

			// Cast a ray onto the terrain
			//RShapeCast shape_cast(sphere_shape, Vec3::sReplicate(1.0f), RMat44::sTranslation(RVec3(0, 10, 0) + center), Vec3(0, -20, 0));
			//ClosestHitCollisionCollector<CastShapeCollector> collector;
			//physicsSystem->GetNarrowPhaseQuery().CastShape(shape_cast, { }, RVec3::sZero(), collector);
			//if (collector.mHit.mBodyID2 == mHeightFieldID)
			//{
				// Create sphere on terrain
			//	BodyCreationSettings bcs(sphere_shape, shape_cast.GetPointOnRay(collector.mHit.mFraction), Quat::sIdentity(), EMotionType::Dynamic, Layers::MOVING);
			//	bodyInterface.CreateAndAddBody(bcs, EActivation::DontActivate);
			//}
		}
*/