#pragma once
#pragma once
#include <raylib.h>
#include <raymath.h>
#include <cmath>
#include <iostream>
#include <FastNoiseLite.h>
#include <vector>
#define RLIGHTS_IMPLEMENTATION
#include "rlights.h"
#include <map>
#include <rlgl.h>
#include <string>


#include <external/glad.h>
#define SCREEN_WIDTH 800
#define SCREEN_HEIGHT 450

#define CHUNK_SIZE 2
#define VIEW_DISTANCE 2 // Number of chunks visible in each direction
#define WORLD_SIZE 2
Shader shader;
#include "CircularMap.h"
#include <cstdint>
std::vector<float> verts;

class Triangle {
public:
	Vector3 p1, p2, p3;
	Color color;

	Triangle(Vector3 p1, Vector3 p2, Vector3 p3, Color color) : p1(p1), p2(p2), p3(p3), color(color) {
		verts.push_back(p1.x);
		verts.push_back(p1.y);
		verts.push_back(p1.z);

		verts.push_back(p2.x);
		verts.push_back(p2.y);
		verts.push_back(p2.z);

		verts.push_back(p3.x);
		verts.push_back(p3.y);
		verts.push_back(p3.z);

	}

	void draw() {
		rlColor4ub(color.r, color.g, color.b, color.a);
		rlVertex3f(p1.x, p1.y, p1.z);
		rlColor4ub(color.r, color.g, color.b, color.a);
		rlVertex3f(p2.x, p2.y, p2.z);
		rlColor4ub(color.r, color.g, color.b, color.a);
		rlVertex3f(p3.x, p3.y, p3.z);
	}
};

const int64_t totalChunks = (VIEW_DISTANCE * WORLD_SIZE + 1) * (VIEW_DISTANCE * WORLD_SIZE + 1);
int64_t totalTriangles = totalChunks * (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1);

struct Vec3 {
	float x, y, z;

	Vec3() : x(0), y(0), z(0) {}
	Vec3(float x, float y, float z) : x(x), y(y), z(z) {}
	Vec3(const Vector3& other) : x(other.x), y(other.y), z(other.z) {}

	// Cross product
	Vec3 cross(const Vec3& other) const {
		return Vec3(
			y * other.z - z * other.y,
			z * other.x - x * other.z,
			x * other.y - y * other.x
		);
	}

	// Subtraction
	Vec3 operator-(const Vec3& other) const {
		return Vec3(x - other.x, y - other.y, z - other.z);
	}

	// Normalize the vector
	Vec3 normalize() const {
		float length = std::sqrt(x * x + y * y + z * z);
		return Vec3(x / length, y / length, z / length);
	}

	Vector3 toVector3() const {
		return Vector3(x, y, z);
	}


};
// Function to extract Vector3 from flat vector of floats
Vector3 getVertex(const std::vector<float>& data, size_t index) {
	return Vector3(data[index * 3], data[index * 3 + 1], data[index * 3 + 2]);
}

Vector3 getNormal(const std::vector<float>& data, size_t index) {
	return getVertex(data, index);
}

Vector2 getTexcoord(const std::vector<float>& data, size_t index) {
	return Vector2(data[index * 2], data[index * 2 + 1]);
}

void generateMeshData(const std::vector<float>& vertexData,
					  std::vector<unsigned short>& indices,
					  std::vector<float>& normals,  // Now normals are a flat list of floats
					  std::vector<float>& texCoords) // Now texCoords are a flat list of floats
{
	for (size_t i = 0; i < vertexData.size() / 9; ++i) {
		// Indices (triangle setup)
		unsigned int idx = i * 3;
		indices.push_back(idx);
		indices.push_back(idx + 1);
		indices.push_back(idx + 2);

		// Get vertices
		Vec3 v0 = getVertex(vertexData, idx);
		Vec3 v1 = getVertex(vertexData, idx + 1);
		Vec3 v2 = getVertex(vertexData, idx + 2);
		
		// Calculate normals for each triangle
		Vec3 edge1 = v1 - v0;
		Vec3 edge2 = v2 - v0;
		Vec3 normal = edge1.cross(edge2).normalize();

		// Store the normal (as three separate floats for each vertex)
		normals.push_back(normal.x);
		normals.push_back(normal.y);
		normals.push_back(normal.z);

		normals.push_back(normal.x);
		normals.push_back(normal.y);
		normals.push_back(normal.z);

		normals.push_back(normal.x);
		normals.push_back(normal.y);
		normals.push_back(normal.z);


	}
}

float* fromVec3(const Vec3& v) {
	return (float*)&v;
}

class Chunk {
public:
	float heightMap[CHUNK_SIZE + 1][CHUNK_SIZE + 1];
	Color col;
	Vector3 position;
	Mesh mesh = { 0 };
	Model mdl;
	int triangleCount;
	std::vector<Triangle> triangles;
	Image heightMapImg;
	Texture tex;

	// vertex buffer
	std::vector<float> vertices;
	std::vector<float> normals;
	std::vector<float> texCoords;
	std::vector<unsigned short> indices;

	unsigned int vao;
	unsigned int vbo;
	unsigned int ebo;
	Material mat = LoadMaterialDefault();
	void generateMesh() {

		generateMeshData(vertices, indices, normals, texCoords);

		float x = vertices[0];
		float y = vertices[1];
		float z = vertices[2];

		this->position = Vector3(x, y, z);

		// Number of vertices (each vertex has 3 floats for position)
		int vertexCount = vertices.size() / 3;

		// Copy vertex positions (must be float*)
		mesh.vertexCount = vertexCount;
		mesh.triangleCount = indices.size() / 3;

		// Allocate memory for vertices, normals, texcoords
		mesh.vertices = (float*)MemAlloc(vertices.size() * sizeof(float));
		mesh.normals = (float*)MemAlloc(normals.size() * sizeof(float));
		//mesh.texcoords = (float*)MemAlloc(texCoords.size() * sizeof(float));
		mesh.indices = (unsigned short*)MemAlloc(indices.size() * sizeof(unsigned short));

		// Copy the vertex data to the mesh structure
		memcpy(mesh.vertices, vertices.data(), vertices.size() * sizeof(float));
		memcpy(mesh.normals, normals.data(), normals.size() * sizeof(float));
		// memcpy(mesh.texcoords, texCoords.data(), texCoords.size() * sizeof(float));

		 // Copy the index data (needs to be in unsigned short)
		for (size_t i = 0; i < indices.size(); ++i) {
			mesh.indices[i] = (unsigned short)indices[i];
		}

		// Upload the mesh data to the GPU (required for rendering)
		UploadMesh(&mesh, true);
		mat = LoadMaterialDefault();
	
		mdl = LoadModelFromMesh(mesh);

		
		/*glGenVertexArrays(1, &vao);
		glGenBuffers(1, &vbo);
		glGenBuffers(1, &ebo);

		glBindVertexArray(vao);

		glBindBuffer(GL_ARRAY_BUFFER, vbo);
		glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(float), vertices.data(), GL_STATIC_DRAW);

		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ebo);
		glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned short), indices.data(), GL_STATIC_DRAW);

		glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
		glEnableVertexAttribArray(0);

		//glBindBuffer(GL_ARRAY_BUFFER, 0);
		glBindVertexArray(0);*/
	}

	void addToVerticies(Vector3 vertex) {
		vertices.push_back(vertex.x);
		vertices.push_back(vertex.y);
		vertices.push_back(vertex.z);
	}

	void draw() {
		//rlEnableVertexArray(vao);
		//rlDrawVertexArrayElements()
		//glBindVertexArray(vao);
		//glDrawElements(GL_TRIANGLES, mesh.triangleCount * 3, GL_UNSIGNED_INT, 0);
	}

};

Chunk chunks[VIEW_DISTANCE * WORLD_SIZE + 1][VIEW_DISTANCE * WORLD_SIZE + 1];



Mesh loadMeshes(Vector3* vertices, Vector3* normals, Vector2* texcoords, int numVertices, int* indices, int numTriangles) {
	Mesh mesh = { 0 };

	mesh.vertices = (float*)malloc(numVertices * 3 * sizeof(float));
	mesh.normals = (float*)malloc(numVertices * 3 * sizeof(float));
	mesh.texcoords = (float*)malloc(numVertices * 2 * sizeof(float));
	mesh.indices = (unsigned short*)malloc(numTriangles * 3 * sizeof(unsigned short));
	mesh.vertexCount = numVertices;
	mesh.triangleCount = numTriangles;

	UploadMesh(&mesh, false);

	return mesh;
}

Mesh genMeshFromChunk(const Chunk& chunk) {
	Mesh mesh = { 0 };

	int numVertices = (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1);
	Vector3* vertices = (Vector3*)malloc(numVertices * sizeof(Vector3));
	Vector3* normals = (Vector3*)malloc(numVertices * sizeof(Vector3));
	Vector2* texcoords = (Vector2*)malloc(numVertices * sizeof(Vector2));

	int numTriangles = CHUNK_SIZE * CHUNK_SIZE * 2;
	int* indices = (int*)malloc(numTriangles * 3 * sizeof(int));

	int vertexIndex = 0;
	int indexIndex = 0;

	for (int x = 0; x <= CHUNK_SIZE; x++) {
		for (int z = 0; z <= CHUNK_SIZE; z++) {
			vertices[vertexIndex] = { chunk.position.x + x, chunk.heightMap[x][z], chunk.position.z + z };

			// Calculate normals (simple average of adjacent face normals)
			Vector3 normalSum = { 0.0f, 0.0f, 0.0f };
			int numNormals = 0;
			if (x > 0) {
				Vector3 v1 = { vertices[vertexIndex].x - 1, chunk.heightMap[x - 1][z], vertices[vertexIndex].z };
				Vector3 v2 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 v3 = { vertices[vertexIndex].x, chunk.heightMap[x][z - 1], vertices[vertexIndex].z - 1 };
				Vector3 faceNormal1 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal1);
				numNormals++;
			}
			if (x < CHUNK_SIZE) {
				Vector3 v1 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 v2 = { vertices[vertexIndex].x + 1, chunk.heightMap[x + 1][z], vertices[vertexIndex].z };
				Vector3 v3 = { vertices[vertexIndex].x, chunk.heightMap[x][z + 1], vertices[vertexIndex].z + 1 };
				Vector3 faceNormal2 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal2);
				numNormals++;
			}
			if (z > 0) {
				Vector3 v1 = { vertices[vertexIndex].x, chunk.heightMap[x][z - 1], vertices[vertexIndex].z - 1 };
				Vector3 v2 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 v3 = { vertices[vertexIndex].x - 1, chunk.heightMap[x - 1][z], vertices[vertexIndex].z };
				Vector3 faceNormal3 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal3);
				numNormals++;
			}
			if (z < CHUNK_SIZE) {
				Vector3 v1 = { vertices[vertexIndex].x + 1, chunk.heightMap[x + 1][z], vertices[vertexIndex].z };
				Vector3 v2 = { vertices[vertexIndex].x, chunk.heightMap[x][z + 1], vertices[vertexIndex].z + 1 };
				Vector3 v3 = { vertices[vertexIndex].x, chunk.heightMap[x][z], vertices[vertexIndex].z };
				Vector3 faceNormal4 = Vector3Normalize(Vector3CrossProduct(Vector3Subtract(v2, v1), Vector3Subtract(v3, v1)));
				normalSum = Vector3Add(normalSum, faceNormal4);
				numNormals++;
			}

			normals[vertexIndex] = Vector3Scale(normalSum, 1.0f / numNormals);
			texcoords[vertexIndex] = { (float)x / CHUNK_SIZE, (float)z / CHUNK_SIZE };

			vertexIndex++;
		}
	}

	for (int x = 0; x < CHUNK_SIZE; x++) {
		for (int z = 0; z < CHUNK_SIZE; z++) {
			indices[indexIndex++] = (x + 1) * (CHUNK_SIZE + 1) + z;
			indices[indexIndex++] = x * (CHUNK_SIZE + 1) + z + 1;
			indices[indexIndex++] = x * (CHUNK_SIZE + 1) + z;

			indices[indexIndex++] = (x + 1) * (CHUNK_SIZE + 1) + z;
			indices[indexIndex++] = (x + 1) * (CHUNK_SIZE + 1) + z + 1;
			indices[indexIndex++] = x * (CHUNK_SIZE + 1) + z + 1;
		}
	}

	mesh = loadMeshes(vertices, normals, texcoords, numVertices, indices, numTriangles * 3);

	free(vertices);
	free(normals);
	free(texcoords);
	free(indices);

	return mesh;
}
CircularMap<Color> colors = CircularMap<Color>(3, { { 0, RED }, { 1, GREEN }, { 2, BLUE } });

Camera camera;

std::string GetChunkID(float x, float z) {
	return std::to_string((int)x) + "," + std::to_string((int)z);
}

Chunk& GetChunk(float x, float z, bool reserve = false) {
	//int chunkID = chunkMap[GetChunkID(x, z)];
	
	//if (reserve) {
	//	chunks[chunkID] = Chunk();
	//}
	return chunks[(int)x][(int)z];
}

void GenerateTerrain() {
	FastNoiseLite noise;
	noise.SetNoiseType(FastNoiseLite::NoiseType_Perlin);
	noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
	noise.SetSeed(123); // Set a seed for consistent noise generation
	noise.SetDomainWarpType(FastNoiseLite::DomainWarpType_OpenSimplex2);

	FastNoiseLite cellNoise;
	cellNoise.SetNoiseType(FastNoiseLite::NoiseType_Cellular);
	noise.SetFrequency(0.1f); // Adjust the frequency of the Perlin noise
	noise.SetSeed(123); // Set a seed for consistent noise generation
	FastNoiseLite simplexNoise;
	simplexNoise.SetNoiseType(FastNoiseLite::NoiseType_OpenSimplex2);
	noise.SetFrequency(0.4f); // Adjust the frequency of the Perlin noise
	noise.SetSeed(123); // Set a seed for consistent noise generation
	float scale = 10.0f;
	srand((unsigned)time(NULL));


	try {
		//chunks.reserve(VIEW_DISTANCE * WORLD_SIZE + 1);
	}
	catch (std::exception& e) {
		std::cout << "Chunk generation failed: " << e.what() << std::endl;
	}
	
	// Simple terrain generation using Perlin noise
	for (int i = 0; i < VIEW_DISTANCE * WORLD_SIZE + 1; i++) {
		for (int j = 0; j < VIEW_DISTANCE * WORLD_SIZE + 1; j++) {
			try {

				Chunk& chunk = GetChunk(i, j, true);
				chunk.position.x = i * CHUNK_SIZE + CHUNK_SIZE / 2;
				chunk.position.y = 0;
				chunk.position.z = j ;

				//auto* pixels = (Color*)malloc(CHUNK_SIZE * CHUNK_SIZE * sizeof(Color));

				//std::vector<Color> heightMapPixels;
				for (int x = 0; x <= CHUNK_SIZE; x++) {
					for (int z = 0; z <= CHUNK_SIZE; z++) {
						float nx = (float)(x + i * CHUNK_SIZE) / (VIEW_DISTANCE * CHUNK_SIZE);
						float nz = (float)(z + j * CHUNK_SIZE) / (VIEW_DISTANCE * CHUNK_SIZE);

						float cellSize = 1.0f / CHUNK_SIZE;

						float cellValue = cellNoise.GetNoise(nx * cellSize, nz * cellSize) * 10.0f;
						float simplexValue = simplexNoise.GetNoise(nx * scale, nz * scale) * 10.0f;

						float px = nx, pz = nz;

						noise.DomainWarp(px, pz);

						px *= scale;
						pz *= scale;
						float perlinValue = noise.GetNoise(px, pz);

						//float noiseValue = perlinValue * simplexValue * 10.0f;

						float height = 10.0f * noise.GetNoise(nx * scale, nz * scale) + cellValue + simplexValue;

						/*					float caveNoise = noise.GetNoise(nx * 2, nz * 2); // Adjust noise frequency for caves
											if (caveNoise < 0.5f) {
												height -= 5.0f; // Lower the terrain height to create a cave
											}*/

											//std::cout << height << std::endl;
						

						chunk.heightMap[x][z] = height;

						//chunk.heightMapImg.data[x * CHUNK_SIZE + z] = Color{ height * 255, height * 255, height * 255 };
						unsigned char charHeight = static_cast<unsigned char>(height * 255);
						
						//pixels[z * CHUNK_SIZE + x] = Color{ charHeight, charHeight, charHeight, 255 };
					}
				}

				//Image map = {
				//	.data = pixels,
				//	.width = CHUNK_SIZE,
				//	.height = CHUNK_SIZE,
				//	.format = PIXELFORMAT_UNCOMPRESSED_R8G8B8A8,

				//};

				//map.mipmaps = 1;

				//chunk.heightMapImg = map;


				//chunk.tex = LoadTextureFromImage(chunk.heightMapImg);

			}
				catch (std::exception& e) {
					std::cout << "Chunk generation failed for chunk " << i << ", " << j << ": " << e.what() << std::endl;
				}


				
		}
	}

	// convert heightmap to an image
	for (int i = 0; i < VIEW_DISTANCE * WORLD_SIZE + 1; i++) {
		for (int j = 0; j < VIEW_DISTANCE * WORLD_SIZE + 1; j++) {
			Chunk& chunk = GetChunk(i, j);


			//std::vector<unsigned char> colors;
			for (int x = 0; x <= CHUNK_SIZE -1; x++) {
				for (int z = 0; z <= CHUNK_SIZE -1; z++) {
					Vector3 p1 = { (float)(x + i * CHUNK_SIZE), chunk.heightMap[x][z], (float)(z + j * CHUNK_SIZE) };
					Vector3 p2 = { (float)(x + i * CHUNK_SIZE + 1), chunk.heightMap[x + 1][z], (float)(z + j * CHUNK_SIZE) };
					Vector3 p3 = { (float)(x + i * CHUNK_SIZE), chunk.heightMap[x][z + 1], (float)(z + j * CHUNK_SIZE + 1) };
					Vector3 p4 = { (float)(x + i * CHUNK_SIZE + 1), chunk.heightMap[x + 1][z + 1], (float)(z + j * CHUNK_SIZE + 1) };

					//DrawTriangle3D(p3, p2, p1, GREEN);
//DrawTriangle3D(p3, p4, p2, BLUE);
					chunk.addToVerticies(p3);
					chunk.addToVerticies(p2);
					chunk.addToVerticies(p1);

					chunk.addToVerticies(p3);
					chunk.addToVerticies(p4);
					chunk.addToVerticies(p2);
				}
			}

			chunk.generateMesh();


		}
	}

	// Simple terrain generation using Perlin noise
	for (int i = 0; i < VIEW_DISTANCE * WORLD_SIZE + 1; i++) {
		for (int j = 0; j < VIEW_DISTANCE * WORLD_SIZE + 1; j++) {
			Chunk& chunk = GetChunk(i, j);

			
			//std::vector<unsigned char> colors;
			for (int x = 0; x <= CHUNK_SIZE; x++) {
				for (int z = 0; z <= CHUNK_SIZE; z++) {
					Vector3 p1 = { (float)(x + i * CHUNK_SIZE), chunk.heightMap[x][z], (float)(z + j * CHUNK_SIZE) };
					Vector3 p2 = { (float)(x + i * CHUNK_SIZE + 1), chunk.heightMap[x + 1][z], (float)(z + j * CHUNK_SIZE) };
					Vector3 p3 = { (float)(x + i * CHUNK_SIZE), chunk.heightMap[x][z + 1], (float)(z + j * CHUNK_SIZE + 1) };
					Vector3 p4 = { (float)(x + i * CHUNK_SIZE + 1), chunk.heightMap[x + 1][z + 1], (float)(z + j * CHUNK_SIZE + 1) };

					//DrawTriangle3D(p3, p2, p1, GREEN);
					//DrawTriangle3D(p3, p4, p2, BLUE);

					chunk.triangles.push_back(Triangle(p3, p2, p1, colors.next()));
					//chunk.vertices.push_back(p3);
				//	chunk.vertices.push_back(p2);
					//chunk.vertices.push_back(p1);


					chunk.triangles.push_back(Triangle(p3, p4, p2, colors.next()));
					//chunk.vertices.push_back(p3);
					//chunk.vertices.push_back(p4);
					//chunk.vertices.push_back(p2);

					chunk.triangleCount += 2;
				}
			}
			//Mesh& mesh = chunk.mesh;

			//mesh.vertexCount = verts.size() ;
			//mesh.vertices = (float*)malloc(verts.size() * sizeof(float));
			//memcpy(mesh.vertices, verts.data(), verts.size() * sizeof(float));
			
			//UploadMesh(&mesh, false);
			
			//mesh = GenMeshHeightmap(chunk.heightMapImg, {CHUNK_SIZE, 2, CHUNK_SIZE});
			//chunk.mdl = LoadModelFromMesh(mesh);


			//chunk.mdl.materials[0].shader = shader;
		}
	}

}





std::vector<Vector3> ConvertToVector3(const std::vector<float>& vertices) {
	std::vector<Vector3> vector3Array;

	// Ensure the vertex array has a multiple of 3 elements (x, y, z)
	if (vertices.size() % 3 != 0) {
		// Handle error: the input array is not formatted correctly
		return vector3Array;
	}

	for (size_t i = 0; i < vertices.size(); i += 3) {
		Vector3 vec;
		vec.x = vertices[i];
		vec.y = vertices[i + 1];
		vec.z = vertices[i + 2];
		vector3Array.push_back(vec);
	}

	return vector3Array;
}


void DrawColoredMeshTriangles(Mesh mesh, Vector3 position, Color* triangleColors) {
	rlPushMatrix();
	rlTranslatef(position.x, position.y, position.z);  // Move to position
	
	rlBegin(RL_TRIANGLES);  // Start drawing triangles
	int triangleIndex = 0;

	std::vector<float> floatVertices;

	for (int i = 0; i < mesh.vertexCount; i++) {
		floatVertices.push_back(mesh.vertices[i]);
	}
	std::vector<Vector3> vertices = ConvertToVector3(floatVertices);

	for (int i = 0; i < vertices.size(); i++) {
		Vector3 v1 = vertices[i];
		std::cout << "Vertex " << i << ": " << v1.x << " " << v1.y << " " << v1.z << std::endl;
		rlColor4ub(triangleColors[triangleIndex].r, triangleColors[triangleIndex].g, triangleColors[triangleIndex].b, triangleColors[triangleIndex].a);
		rlVertex3f(v1.x, v1.y, v1.z);
		if ((i + 1) % 3 == 0) {
			triangleIndex++;
		}
	}


	rlEnd();  // End drawing triangles

	rlPopMatrix();
}


Mesh GenerateChunkMesh(Chunk& chunk, int chunkX, int chunkZ) {
	Mesh mesh = { 0 };

	int vertexCount = CHUNK_SIZE * CHUNK_SIZE * 6; // 2 triangles per quad
	mesh.vertices = (float*)MemAlloc(vertexCount * 3 * sizeof(float)); // 3 vertices per triangle
	mesh.texcoords = (float*)MemAlloc(vertexCount * 2 * sizeof(float)); // 2 texcoords per vertex
	mesh.indices = (unsigned short*)MemAlloc(vertexCount * sizeof(unsigned short));

	int vCounter = 0; // Vertex counter
	int tcCounter = 0; // Texcoord counter
	int iCounter = 0; // Index counter

	for (int z = 0; z < CHUNK_SIZE; z++) {
		for (int x = 0; x < CHUNK_SIZE; x++) {
			// Calculate world position
			float worldX = (float)(chunkX * CHUNK_SIZE + x);
			float worldZ = (float)(chunkZ * CHUNK_SIZE + z);

			// Fetch height from the heightMap
			float height = chunk.heightMap[x][z];
			float heightRight = chunk.heightMap[x + 1][z];
			float heightDown = chunk.heightMap[x][z + 1];
			float heightDownRight = chunk.heightMap[x + 1][z + 1];

			// Create two triangles for each quad
			// Triangle 1
			mesh.vertices[vCounter++] = worldX;
			mesh.vertices[vCounter++] = height;
			mesh.vertices[vCounter++] = worldZ;

			mesh.vertices[vCounter++] = worldX + 1;
			mesh.vertices[vCounter++] = heightRight;
			mesh.vertices[vCounter++] = worldZ;

			mesh.vertices[vCounter++] = worldX;
			mesh.vertices[vCounter++] = heightDown;
			mesh.vertices[vCounter++] = worldZ + 1;

			// Triangle 2
			mesh.vertices[vCounter++] = worldX + 1;
			mesh.vertices[vCounter++] = heightRight;
			mesh.vertices[vCounter++] = worldZ;

			mesh.vertices[vCounter++] = worldX + 1;
			mesh.vertices[vCounter++] = heightDownRight;
			mesh.vertices[vCounter++] = worldZ + 1;

			mesh.vertices[vCounter++] = worldX;
			mesh.vertices[vCounter++] = heightDown;
			mesh.vertices[vCounter++] = worldZ + 1;

			// Optionally, add texture coordinates and indices...
			// mesh.texcoords[tcCounter++] = ... (u,v coords);
			// mesh.indices[iCounter++] = ... (add indices);
		}
	}

	UploadMesh(&mesh, true);
	return mesh;
}

void DrawTerrain() {
	float vDistMultiplier = 100.0f;
	float vDist = (VIEW_DISTANCE * CHUNK_SIZE) * vDistMultiplier;
	bool forceAllDraw = false;

	// Draw terrain for visible chunks
	for (int i = 0; i < VIEW_DISTANCE * WORLD_SIZE + 1; i++) {
		for (int j = 0; j < VIEW_DISTANCE * WORLD_SIZE + 1; j++) {
			try {
				Chunk& chunk = GetChunk(i, j);
				SetShaderValueTexture(shader, GetShaderLocation(shader, "heightmap"), chunk.tex);
				
				Vector3 chunkPosition = { (float)i * CHUNK_SIZE, 0, (float)j * CHUNK_SIZE };

				DrawModelWiresEx(chunk.mdl, chunk.position, chunkPosition, 0.0f, Vector3{CHUNK_SIZE , 3, CHUNK_SIZE }, WHITE);



			}
			catch (std::exception& e) {
				std::cout << "Chunk not found: " << i << ", " << j << std::endl;
				continue;
			}
		}
	}
}

int ChunkTesting() {
	// Initialization
	InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT, "Procedural World Generation");
	camera = Camera();

	camera.position = Vector3{ 2.0f, 10.0f, 6.0f };    // Camera position
	camera.target = Vector3{ 0.0f, 0.5f, 0.0f };      // Camera looking at point
	camera.up = Vector3{ 0.0f, 1.0f, 0.0f };          // Camera up vector (rotation towards target)
	camera.fovy = 45.0f;                                // Camera field-of-view Y
	camera.projection = CAMERA_PERSPECTIVE;             // Camera projection type

	shader = LoadShader("terrain.vert", "terrain.frag");

	//shader.locs[SHADER_LOC_VECTOR_VIEW] = GetShaderLocation(shader, "viewPos");
	//int ambientLoc = GetShaderLocation(shader, "ambient");
	//float amb[] = { 0.1f, 0.1f, 0.1f, 1.0f };
	//SetShaderValue(shader, ambientLoc, &amb, SHADER_UNIFORM_VEC4);

	// Create lights
	//Light lights[MAX_LIGHTS] = { 0 };

	//lights[0] = CreateLight(LightType::LIGHT_POINT, camera.position, Vector3{ 0.0f, 0.0f, 0.0f }, WHITE, shader);
	GenerateTerrain();

	SetTargetFPS(60);
	DisableCursor();
	float color[] = { BLUE.r, BLUE.g, BLUE.b, BLUE.a };
	std::cout << "TotalChunks: " << totalChunks << ", with a total of " << totalTriangles << " triangles" << std::endl;

	//Image perlin = GenImagePerlinNoise(200, 200, 0, 0, 100.0f);
	//std::cout << perlin.format << std::endl;
	//Model mdl = LoadModelFromMesh(GenMeshHeightmap(perlin, Vector3{ 200.0f, 10.0f, 200.0f }));
	// Set the heightmap texture to the shader
	//SetShaderValueTexture(shader, GetShaderLocation(shader, "heightmap"), LoadTextureFromImage(perlin));

	// Set light position (for example, above the terrain)
	Vector3 lightPos = { 0.0f, 20.0f, 0.0f };
	SetShaderValue(shader, GetShaderLocation(shader, "lightPos"), &lightPos, SHADER_UNIFORM_VEC3);

	std::vector<Chunk> chunks;
	for (int i = 0; i < VIEW_DISTANCE * WORLD_SIZE + 1; i ++) {
		for (int j = 0; j < VIEW_DISTANCE * WORLD_SIZE + 1; j ++) {
			Chunk chunk;
			chunk = GetChunk(i, j);
			//chunk.position = Vector3{ (float)i, 0, (float)j };
			chunk.col = colors.next();
			chunks.push_back(chunk);
		}
	}

	//mdl.materials[0].shader = shader;
	// Main loop
	while (!WindowShouldClose()) {

		// Update
		UpdateCamera(&camera, CAMERA_FIRST_PERSON);

		if (IsKeyDown(KEY_SPACE)) {
			camera.position.y += 1.0f;
		}

		if (IsKeyDown(KEY_C)) {
			camera.position.y -= 1.0f;
		}

		//float cameraPos[3] = { camera.position.x, camera.position.y, camera.position.z };
		//SetShaderValue(shader, shader.locs[SHADER_LOC_VECTOR_VIEW], cameraPos, SHADER_UNIFORM_VEC3);
		//for (int i = 0; i < MAX_LIGHTS; i++) UpdateLightValues(shader, lights[i]);

		// Draw
		BeginDrawing();
		

		ClearBackground(BLACK);
		BeginMode3D(camera);

		

		for (int i = 0; i < chunks.size(); i++) {
			Chunk& chunk = chunks[i];
			Vector3 chunkPosition = chunk.position;

			chunk.position = chunkPosition;

			
			DrawModelEx(chunk.mdl, chunk.position, Vector3Zero(), 0.0f, Vector3{ CHUNK_SIZE, 3.0f, CHUNK_SIZE}, chunk.col);
		
			DrawSphere(chunkPosition, 1.0f, chunk.col);
		}
		EndMode3D();


		for (int i = 0; i < chunks.size(); i++) {
			Chunk& chunk = chunks[i];
			Vector2 worldToScreen = GetWorldToScreen(chunk.position, camera);
			//DrawText(TextFormat("Chunk %i: %f, %f, %f", i, chunk.position.x, chunk.position.y, chunk.position.z), worldToScreen.x, worldToScreen.y, 20, GREEN);
		}

				//Chunk& chunk = GetChunk(1, 1);
				//Texture heightMap = chunk.tex;

				//DrawTexture(heightMap, 0, 0, WHITE);


		EndDrawing();
		//break;
	}

	// Clean up
	CloseWindow();

	return 0;
}
